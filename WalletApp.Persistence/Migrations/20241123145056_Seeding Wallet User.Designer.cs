// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WalletApp.Infrastructure.Persistence;

#nullable disable

namespace WalletApp.Persistence.Migrations
{
    [DbContext(typeof(WalletAppDbContext))]
    [Migration("20241123145056_Seeding Wallet User")]
    partial class SeedingWalletUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WalletApp.Domain.Entities.Point", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("PointValue")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Points");
                });

            modelBuilder.Entity("WalletApp.Domain.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("WalletApp.Domain.Entities.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("CurrentBalance")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalPoints")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("WalletApp.Domain.Entities.WalletUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("WalletUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1af4e2e5-f691-4c10-89c5-8f177268de97"),
                            Address = "123 Main St",
                            CreatedAt = new DateTime(2024, 11, 23, 14, 50, 55, 826, DateTimeKind.Utc).AddTicks(7360),
                            DateOfBirth = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "john.doe@example.com",
                            FirstName = "John",
                            LastName = "Doe",
                            PhoneNumber = "123-456-7890",
                            UpdatedAt = new DateTime(2024, 11, 23, 14, 50, 55, 826, DateTimeKind.Utc).AddTicks(7363)
                        },
                        new
                        {
                            Id = new Guid("2b8d88f5-d8e2-4665-9f87-16471d5d90a3"),
                            Address = "456 Elm St",
                            CreatedAt = new DateTime(2024, 11, 23, 14, 50, 55, 826, DateTimeKind.Utc).AddTicks(7404),
                            DateOfBirth = new DateTime(1985, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jane.smith@example.com",
                            FirstName = "Jane",
                            LastName = "Smith",
                            PhoneNumber = "234-567-8901",
                            UpdatedAt = new DateTime(2024, 11, 23, 14, 50, 55, 826, DateTimeKind.Utc).AddTicks(7405)
                        },
                        new
                        {
                            Id = new Guid("368ad1f5-b6ec-4828-af78-444c76429265"),
                            Address = "789 Oak St",
                            CreatedAt = new DateTime(2024, 11, 23, 14, 50, 55, 826, DateTimeKind.Utc).AddTicks(7411),
                            DateOfBirth = new DateTime(1990, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "alice.johnson@example.com",
                            FirstName = "Alice",
                            LastName = "Johnson",
                            PhoneNumber = "345-678-9012",
                            UpdatedAt = new DateTime(2024, 11, 23, 14, 50, 55, 826, DateTimeKind.Utc).AddTicks(7412)
                        },
                        new
                        {
                            Id = new Guid("b1d2efa4-88e9-4db4-95ad-1604488b7c5b"),
                            Address = "101 Pine St",
                            CreatedAt = new DateTime(2024, 11, 23, 14, 50, 55, 826, DateTimeKind.Utc).AddTicks(7417),
                            DateOfBirth = new DateTime(1995, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bob.brown@example.com",
                            FirstName = "Bob",
                            LastName = "Brown",
                            PhoneNumber = "456-789-0123",
                            UpdatedAt = new DateTime(2024, 11, 23, 14, 50, 55, 826, DateTimeKind.Utc).AddTicks(7418)
                        },
                        new
                        {
                            Id = new Guid("c4fa1d8f-0e4d-4733-b226-d31e7b5f786d"),
                            Address = "202 Maple St",
                            CreatedAt = new DateTime(2024, 11, 23, 14, 50, 55, 826, DateTimeKind.Utc).AddTicks(7423),
                            DateOfBirth = new DateTime(2000, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "charlie.davis@example.com",
                            FirstName = "Charlie",
                            LastName = "Davis",
                            PhoneNumber = "567-890-1234",
                            UpdatedAt = new DateTime(2024, 11, 23, 14, 50, 55, 826, DateTimeKind.Utc).AddTicks(7423)
                        },
                        new
                        {
                            Id = new Guid("e6519812-994f-42e5-acb7-80b3f509ca21"),
                            Address = "303 Birch St",
                            CreatedAt = new DateTime(2024, 11, 23, 14, 50, 55, 826, DateTimeKind.Utc).AddTicks(7429),
                            DateOfBirth = new DateTime(2005, 6, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "diana.miller@example.com",
                            FirstName = "Diana",
                            LastName = "Miller",
                            PhoneNumber = "678-901-2345",
                            UpdatedAt = new DateTime(2024, 11, 23, 14, 50, 55, 826, DateTimeKind.Utc).AddTicks(7430)
                        },
                        new
                        {
                            Id = new Guid("4ab1dedd-cf0d-4522-bc8d-78bdd5200e40"),
                            Address = "404 Cedar St",
                            CreatedAt = new DateTime(2024, 11, 23, 14, 50, 55, 826, DateTimeKind.Utc).AddTicks(7434),
                            DateOfBirth = new DateTime(2010, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "eve.wilson@example.com",
                            FirstName = "Eve",
                            LastName = "Wilson",
                            PhoneNumber = "789-012-3456",
                            UpdatedAt = new DateTime(2024, 11, 23, 14, 50, 55, 826, DateTimeKind.Utc).AddTicks(7434)
                        },
                        new
                        {
                            Id = new Guid("464b4468-3771-44cb-b949-d08660e15f14"),
                            Address = "505 Walnut St",
                            CreatedAt = new DateTime(2024, 11, 23, 14, 50, 55, 826, DateTimeKind.Utc).AddTicks(7439),
                            DateOfBirth = new DateTime(2015, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "frank.moore@example.com",
                            FirstName = "Frank",
                            LastName = "Moore",
                            PhoneNumber = "890-123-4567",
                            UpdatedAt = new DateTime(2024, 11, 23, 14, 50, 55, 826, DateTimeKind.Utc).AddTicks(7440)
                        },
                        new
                        {
                            Id = new Guid("a808d4ea-3516-4451-8c76-f57eec9f3a7a"),
                            Address = "606 Chestnut St",
                            CreatedAt = new DateTime(2024, 11, 23, 14, 50, 55, 826, DateTimeKind.Utc).AddTicks(7463),
                            DateOfBirth = new DateTime(2020, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "grace.taylor@example.com",
                            FirstName = "Grace",
                            LastName = "Taylor",
                            PhoneNumber = "901-234-5678",
                            UpdatedAt = new DateTime(2024, 11, 23, 14, 50, 55, 826, DateTimeKind.Utc).AddTicks(7464)
                        },
                        new
                        {
                            Id = new Guid("fce6f1ae-a351-4bf9-beb5-d30f5780f38e"),
                            Address = "707 Spruce St",
                            CreatedAt = new DateTime(2024, 11, 23, 14, 50, 55, 826, DateTimeKind.Utc).AddTicks(7469),
                            DateOfBirth = new DateTime(2025, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "hank.anderson@example.com",
                            FirstName = "Hank",
                            LastName = "Anderson",
                            PhoneNumber = "012-345-6789",
                            UpdatedAt = new DateTime(2024, 11, 23, 14, 50, 55, 826, DateTimeKind.Utc).AddTicks(7470)
                        });
                });

            modelBuilder.Entity("WalletApp.Domain.Entities.Point", b =>
                {
                    b.HasOne("WalletApp.Domain.Entities.WalletUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WalletApp.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("WalletApp.Domain.Entities.WalletUser", "WalletUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WalletUser");
                });

            modelBuilder.Entity("WalletApp.Domain.Entities.Wallet", b =>
                {
                    b.HasOne("WalletApp.Domain.Entities.WalletUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
