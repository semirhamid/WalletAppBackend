// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WalletApp.Infrastructure.Persistence;

#nullable disable

namespace WalletApp.Persistence.Migrations
{
    [DbContext(typeof(WalletAppDbContext))]
    [Migration("20241123160758_CHange the time stamp")]
    partial class CHangethetimestamp
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WalletApp.Domain.Entities.Point", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("PointValue")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Points");
                });

            modelBuilder.Entity("WalletApp.Domain.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("WalletApp.Domain.Entities.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("CurrentBalance")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalPoints")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("WalletApp.Domain.Entities.WalletUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("WalletUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e66057f8-e7cd-446d-87ef-a6a5686f8570"),
                            Address = "123 Main St",
                            CreatedAt = new DateTime(2024, 11, 23, 16, 7, 58, 66, DateTimeKind.Utc).AddTicks(8840),
                            DateOfBirth = new DateTime(2024, 11, 23, 16, 7, 58, 66, DateTimeKind.Utc).AddTicks(8877),
                            Email = "john.doe@example.com",
                            FirstName = "John",
                            LastName = "Doe",
                            PhoneNumber = "123-456-7890",
                            UpdatedAt = new DateTime(2024, 11, 23, 16, 7, 58, 66, DateTimeKind.Utc).AddTicks(8843)
                        },
                        new
                        {
                            Id = new Guid("cdf94f16-9b86-43ab-ba7f-c106fe34cba6"),
                            Address = "456 Elm St",
                            CreatedAt = new DateTime(2024, 11, 23, 16, 7, 58, 66, DateTimeKind.Utc).AddTicks(8878),
                            DateOfBirth = new DateTime(2024, 11, 23, 16, 7, 58, 66, DateTimeKind.Utc).AddTicks(8881),
                            Email = "jane.smith@example.com",
                            FirstName = "Jane",
                            LastName = "Smith",
                            PhoneNumber = "234-567-8901",
                            UpdatedAt = new DateTime(2024, 11, 23, 16, 7, 58, 66, DateTimeKind.Utc).AddTicks(8878)
                        },
                        new
                        {
                            Id = new Guid("46f40183-1f18-4b60-b9dd-8822f1af8775"),
                            Address = "789 Oak St",
                            CreatedAt = new DateTime(2024, 11, 23, 16, 7, 58, 66, DateTimeKind.Utc).AddTicks(8882),
                            DateOfBirth = new DateTime(2024, 11, 23, 16, 7, 58, 66, DateTimeKind.Utc).AddTicks(8884),
                            Email = "alice.johnson@example.com",
                            FirstName = "Alice",
                            LastName = "Johnson",
                            PhoneNumber = "345-678-9012",
                            UpdatedAt = new DateTime(2024, 11, 23, 16, 7, 58, 66, DateTimeKind.Utc).AddTicks(8882)
                        },
                        new
                        {
                            Id = new Guid("7ad7db99-b84f-4c88-b92f-240d7f694e17"),
                            Address = "101 Pine St",
                            CreatedAt = new DateTime(2024, 11, 23, 16, 7, 58, 66, DateTimeKind.Utc).AddTicks(8885),
                            DateOfBirth = new DateTime(2024, 11, 23, 16, 7, 58, 66, DateTimeKind.Utc).AddTicks(8888),
                            Email = "bob.brown@example.com",
                            FirstName = "Bob",
                            LastName = "Brown",
                            PhoneNumber = "456-789-0123",
                            UpdatedAt = new DateTime(2024, 11, 23, 16, 7, 58, 66, DateTimeKind.Utc).AddTicks(8885)
                        },
                        new
                        {
                            Id = new Guid("97c24ee1-e22c-43c0-ab44-1270cbc2e6f1"),
                            Address = "202 Maple St",
                            CreatedAt = new DateTime(2024, 11, 23, 16, 7, 58, 66, DateTimeKind.Utc).AddTicks(8889),
                            DateOfBirth = new DateTime(2024, 11, 23, 16, 7, 58, 66, DateTimeKind.Utc).AddTicks(8892),
                            Email = "charlie.davis@example.com",
                            FirstName = "Charlie",
                            LastName = "Davis",
                            PhoneNumber = "567-890-1234",
                            UpdatedAt = new DateTime(2024, 11, 23, 16, 7, 58, 66, DateTimeKind.Utc).AddTicks(8889)
                        },
                        new
                        {
                            Id = new Guid("02a0a73a-ba93-4e02-9e2f-967bb3aaa526"),
                            Address = "303 Birch St",
                            CreatedAt = new DateTime(2024, 11, 23, 16, 7, 58, 66, DateTimeKind.Utc).AddTicks(8892),
                            DateOfBirth = new DateTime(2024, 11, 23, 16, 7, 58, 66, DateTimeKind.Utc).AddTicks(8896),
                            Email = "diana.miller@example.com",
                            FirstName = "Diana",
                            LastName = "Miller",
                            PhoneNumber = "678-901-2345",
                            UpdatedAt = new DateTime(2024, 11, 23, 16, 7, 58, 66, DateTimeKind.Utc).AddTicks(8893)
                        },
                        new
                        {
                            Id = new Guid("03cf2198-59c1-445c-8401-25dc77ca242c"),
                            Address = "404 Cedar St",
                            CreatedAt = new DateTime(2024, 11, 23, 16, 7, 58, 66, DateTimeKind.Utc).AddTicks(8896),
                            DateOfBirth = new DateTime(2024, 11, 23, 16, 7, 58, 66, DateTimeKind.Utc).AddTicks(8924),
                            Email = "eve.wilson@example.com",
                            FirstName = "Eve",
                            LastName = "Wilson",
                            PhoneNumber = "789-012-3456",
                            UpdatedAt = new DateTime(2024, 11, 23, 16, 7, 58, 66, DateTimeKind.Utc).AddTicks(8897)
                        },
                        new
                        {
                            Id = new Guid("793de3bc-679f-4fe6-99df-88a247486222"),
                            Address = "505 Walnut St",
                            CreatedAt = new DateTime(2024, 11, 23, 16, 7, 58, 66, DateTimeKind.Utc).AddTicks(8926),
                            DateOfBirth = new DateTime(2024, 11, 23, 16, 7, 58, 66, DateTimeKind.Utc).AddTicks(8929),
                            Email = "frank.moore@example.com",
                            FirstName = "Frank",
                            LastName = "Moore",
                            PhoneNumber = "890-123-4567",
                            UpdatedAt = new DateTime(2024, 11, 23, 16, 7, 58, 66, DateTimeKind.Utc).AddTicks(8926)
                        },
                        new
                        {
                            Id = new Guid("bc3c4d93-4778-4e95-8b49-fedb9eba8366"),
                            Address = "606 Chestnut St",
                            CreatedAt = new DateTime(2024, 11, 23, 16, 7, 58, 66, DateTimeKind.Utc).AddTicks(8929),
                            DateOfBirth = new DateTime(2024, 11, 23, 16, 7, 58, 66, DateTimeKind.Utc).AddTicks(8932),
                            Email = "grace.taylor@example.com",
                            FirstName = "Grace",
                            LastName = "Taylor",
                            PhoneNumber = "901-234-5678",
                            UpdatedAt = new DateTime(2024, 11, 23, 16, 7, 58, 66, DateTimeKind.Utc).AddTicks(8930)
                        },
                        new
                        {
                            Id = new Guid("fe0d28c8-145e-4dff-bba5-14fbfc772313"),
                            Address = "707 Spruce St",
                            CreatedAt = new DateTime(2024, 11, 23, 16, 7, 58, 66, DateTimeKind.Utc).AddTicks(8932),
                            DateOfBirth = new DateTime(2024, 11, 23, 16, 7, 58, 66, DateTimeKind.Utc).AddTicks(8935),
                            Email = "hank.anderson@example.com",
                            FirstName = "Hank",
                            LastName = "Anderson",
                            PhoneNumber = "012-345-6789",
                            UpdatedAt = new DateTime(2024, 11, 23, 16, 7, 58, 66, DateTimeKind.Utc).AddTicks(8933)
                        });
                });

            modelBuilder.Entity("WalletApp.Domain.Entities.Point", b =>
                {
                    b.HasOne("WalletApp.Domain.Entities.WalletUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WalletApp.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("WalletApp.Domain.Entities.WalletUser", "WalletUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WalletUser");
                });

            modelBuilder.Entity("WalletApp.Domain.Entities.Wallet", b =>
                {
                    b.HasOne("WalletApp.Domain.Entities.WalletUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
